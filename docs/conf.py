# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------
import os
import sys

import sphinx_rtd_theme
# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

sys.path.insert(0, os.path.abspath('../..'))

# -- Project information -----------------------------------------------------

project = u'pyprob'
copyright = u'2018, Atılım Güneş Baydin'
author = u'Atılım Güneş Baydin'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = '0.1'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.intersphinx',  #
    'sphinx.ext.todo',  #
    'sphinx.ext.mathjax',  #
    'sphinx.ext.ifconfig',  #
    'sphinx.ext.viewcode',  #
    'sphinx.ext.githubpages',  #
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
]
# Disable documentation inheritance so as to avoid inheriting
# docstrings in a different format, e.g. when the parent class
# is a PyTorch class.

autodoc_inherit_docstrings = False

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store','__pycharm__']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'
# do not prepend module name to functions
add_module_names = False

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"
# html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
# html_theme_options = {
#     'navigation_depth': 3,
#     'logo_only': True,
# }

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']
# html_style = 'css/pyro.css'


# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".

# html_static_path = ['_static']
# html_style = 'css/pyprob.css'
# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'pyprobdoc'

# -- Options for HTML output ----------------------------------------------

# logo
# html_logo = '_static/img/pyro_logo_wide.png'

# logo
# html_favicon = '_static/img/favicon/favicon.ico'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'pyprob.tex', u'pyprob Documentation',
     u'Atılım Güneş Baydin', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'pyprob', u'pyprob Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'pyprob', 'pyprob Documentation',
     author, 'pyprob', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''
def run_hmc_parallel(chain_id,PATH):
    print('Running chain {}'.format(chain_id))
    n_param = dim
    n_disc = n_param
    hmc_obj = HMC(f, n_disc, n_param, f_update)
    inference= 'hmc'
    dt = np.array([.1, 0.15])
    nstep = [5, 10]
    n_burnin = 0
    n_sample = 100000

    seed = chain_id
    torch.manual_seed(seed=seed)
    np.random.seed(seed)

    print("Start Sampling Chain = ", chain_id, "\n")

    x0 = Variable(torch.zeros(dim,1))
    for d in range(dim):
        x0[d, 0] = Normal(0, 1).sample()
    t0 = time.time()
    samples, accept =\
        hmc_obj.run_hmc(x0, dt, nstep, n_burnin, n_sample, seed=seed)
    t1 = time.time()
    total = t1-t0
    print('Total : {0}'.format(total))
    print(' Total time for {3} to generate {0} samples in {1} dims is: {2}'.format(n_sample, dim, total, inference))
    df = pd.DataFrame(samples.numpy())
    PATH = PATH +'/data/{}d/'.format(dim)
    os.makedirs(PATH, exist_ok=True)
    df.to_csv(PATH + 'hmc_' + str(n_sample) + '_chain_' + str(chain_id) +'.csv')
# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', None),
    'torch': ('http://pytorch.org/docs/master/', None),
    'networkx': ('https://networkx.github.io/documentation/stable/', None),
    'opt_einsum': ('https://optimized-einsum.readthedocs.io/en/stable/', None)
}

# document class constructors (__init__ methods):
""" comment out this functionality for now;
def skip(app, what, name, obj, skip, options):
    if name == "__init__":
        return False
    return skip
"""


# def setup(app):
#     app.add_stylesheet('css/pyro.css')
#     app.connect("autodoc-skip-member", skip)


# @jpchen's hack to get rtd builder to install latest pytorch
if 'READTHEDOCS' in os.environ:
    os.system('curl -o install.sh https://raw.githubusercontent.com/uber/pyro/dev/scripts/install_pytorch.sh')
    os.system('curl https://raw.githubusercontent.com/probprog/pyprob/README.md > README.md')
    os.system('bash install.sh')
    os.system('rm -f install.sh')